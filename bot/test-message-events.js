const { Client, GatewayIntentBits, Events } = require('discord.js');
require('dotenv').config({ path: '../.env.local' });

const AutoLogSystem = require('./features/logging/auto-log');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ]
});

const autoLogSystem = new AutoLogSystem(client);

client.once(Events.ClientReady, async (readyClient) => {
  console.log('‚úÖ Message Events Test Bot started successfully');
  console.log(`‚úÖ Bot logged in as ${readyClient.user.tag}`);
  console.log(`üîó Connected to ${readyClient.guilds.cache.size} servers`);
  
  // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ÿßŸÑŸÖÿ≠ÿØÿØ
  const targetGuildId = '423067123225722891';
  const guild = readyClient.guilds.cache.get(targetGuildId);
  
  if (guild) {
    console.log(`üè† Found guild: ${guild.name} (${guild.id})`);
    
    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ™ŸÅÿπŸäŸÑ Auto Log
    const isEnabled = await autoLogSystem.isEnabled(guild.id);
    console.log(`ü§ñ Auto Log enabled: ${isEnabled}`);
    
    if (isEnabled) {
      console.log('‚úÖ Auto Log system is enabled and ready to monitor message events');
      console.log('\nüîç Monitoring for:');
      console.log('   üóëÔ∏è Message deletion');
      console.log('   ‚úèÔ∏è Message editing');
      console.log('\nüí° Try deleting or editing a message in the server to test!');
    } else {
      console.log('‚ùå Auto Log system is disabled for this guild');
    }
  } else {
    console.log(`‚ùå Guild not found: ${targetGuildId}`);
  }
});

// ÿ™ÿ™ÿ®ÿπ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ
client.on(Events.MessageDelete, async (message) => {
  // ÿ™ÿ¨ÿßŸáŸÑ ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ®Ÿàÿ™ÿßÿ™ ŸàÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÅÿßÿ±ÿ∫ÿ©
  if (!message.author || message.author.bot) {
    console.log('ü§ñ Ignoring bot message deletion');
    return;
  }
  
  console.log(`\nüóëÔ∏è MESSAGE DELETE EVENT DETECTED:`);
  console.log(`   Author: ${message.author.tag} (${message.author.id})`);
  console.log(`   Channel: ${message.channel.name} (${message.channel.id})`);
  console.log(`   Guild: ${message.guild.name}`);
  console.log(`   Content: "${message.content || 'No content'}"`);
  console.log(`   Message ID: ${message.id}`);
  
  try {
    console.log('üîÑ Calling autoLogSystem.logMessageEvent...');
    await autoLogSystem.logMessageEvent(message, 'delete');
    console.log('‚úÖ Message deletion logged successfully');
  } catch (error) {
    console.error('‚ùå Error logging message deletion:', error);
  }
});

// ÿ™ÿ™ÿ®ÿπ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ
client.on(Events.MessageUpdate, async (oldMessage, newMessage) => {
  // ÿ™ÿ¨ÿßŸáŸÑ ÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ®Ÿàÿ™ÿßÿ™ ŸàÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ™Ÿä ŸÑŸÖ ÿ™ÿ™ÿ∫Ÿäÿ±
  if (!newMessage.author || newMessage.author.bot) {
    console.log('ü§ñ Ignoring bot message edit');
    return;
  }
  
  if (oldMessage.content === newMessage.content) {
    console.log('üìù Message content unchanged, ignoring');
    return;
  }
  
  console.log(`\n‚úèÔ∏è MESSAGE EDIT EVENT DETECTED:`);
  console.log(`   Author: ${newMessage.author.tag} (${newMessage.author.id})`);
  console.log(`   Channel: ${newMessage.channel.name} (${newMessage.channel.id})`);
  console.log(`   Guild: ${newMessage.guild.name}`);
  console.log(`   Old Content: "${oldMessage.content || 'No content'}"`);
  console.log(`   New Content: "${newMessage.content || 'No content'}"`);
  console.log(`   Message ID: ${newMessage.id}`);
  
  try {
    console.log('üîÑ Calling autoLogSystem.logMessageEvent...');
    await autoLogSystem.logMessageEvent(newMessage, 'edit', null, oldMessage.content);
    console.log('‚úÖ Message edit logged successfully');
  } catch (error) {
    console.error('‚ùå Error logging message edit:', error);
  }
});

client.on('error', (error) => {
  console.error('‚ùå Discord client error:', error);
});

client.login(process.env.DISCORD_BOT_TOKEN)
  .then(() => {
    console.log('üîê Bot authentication successful');
  })
  .catch((error) => {
    console.error('‚ùå Bot authentication failed:', error);
    process.exit(1);
  });