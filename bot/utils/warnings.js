// ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
// User Warnings Management System

const fs = require('fs').promises;
const path = require('path');

// ŸÖÿ≥ÿßÿ± ŸÖŸÑŸÅ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
const WARNINGS_FILE = path.join(__dirname, '../data/warnings.json');

/**
 * ŸÇÿ±ÿßÿ°ÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
 * Read warnings data
 */
async function readWarningsData() {
  try {
    const data = await fs.readFile(WARNINGS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') {
      // ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿ¨ÿØŸäÿØ ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖŸàÿ¨ŸàÿØÿßŸã
      const initialData = {};
      await writeWarningsData(initialData);
      return initialData;
    }
    throw error;
  }
}

/**
 * ŸÉÿ™ÿßÿ®ÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
 * Write warnings data
 */
async function writeWarningsData(data) {
  try {
    // ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ¨ŸÑÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    const dataDir = path.dirname(WARNINGS_FILE);
    await fs.mkdir(dataDir, { recursive: true });
    
    await fs.writeFile(WARNINGS_FILE, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error writing warnings data:', error);
    throw error;
  }
}

/**
 * ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * Get user warnings
 * @param {string} guildId - ŸÖÿπÿ±ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
 * @param {string} userId - ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * @param {string} type - ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ± (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä - ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØŸá ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ¨ÿßÿπ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™)
 */
async function getUserWarnings(guildId, userId, type = null) {
  try {
    const warningsData = await readWarningsData();
    
    if (!warningsData[guildId]) {
      return [];
    }
    
    if (!warningsData[guildId][userId]) {
      return [];
    }
    
    // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ŸÜŸàÿπ ŸÖÿπŸäŸÜÿå ÿ•ÿ±ÿ¨ÿßÿπ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ Ÿáÿ∞ÿß ÿßŸÑŸÜŸàÿπ ŸÅŸÇÿ∑
    if (type) {
      if (!warningsData[guildId][userId][type]) {
        return [];
      }
      return warningsData[guildId][userId][type];
    }
    
    // ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ŸÜŸàÿπÿå ÿ•ÿ±ÿ¨ÿßÿπ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
    const allWarnings = [];
    const userWarnings = warningsData[guildId][userId];
    
    for (const warningType in userWarnings) {
      if (Array.isArray(userWarnings[warningType])) {
        userWarnings[warningType].forEach(warning => {
          allWarnings.push({
            ...warning,
            type: warningType
          });
        });
      }
    }
    
    // ÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ÿßÿ±ŸäÿÆ (ÿßŸÑÿ£ÿ≠ÿØÿ´ ÿ£ŸàŸÑÿßŸã)
    allWarnings.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    return allWarnings;
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error getting user warnings:', error);
    return [];
  }
}

/**
 * ÿ•ÿ∂ÿßŸÅÿ© ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * Add warning to user
 * @param {string} guildId - ŸÖÿπÿ±ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
 * @param {string} userId - ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * @param {string} type - ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
 * @param {Object} warningData - ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
 */
async function addUserWarning(guildId, userId, type, warningData) {
  try {
    const warningsData = await readWarningsData();
    
    // ÿ•ŸÜÿ¥ÿßÿ° ŸáŸäŸÉŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖŸàÿ¨ŸàÿØÿßŸã
    if (!warningsData[guildId]) {
      warningsData[guildId] = {};
    }
    
    if (!warningsData[guildId][userId]) {
      warningsData[guildId][userId] = {};
    }
    
    if (!warningsData[guildId][userId][type]) {
      warningsData[guildId][userId][type] = [];
    }
    
    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ± ÿßŸÑÿ¨ÿØŸäÿØ
    const warning = {
      id: generateWarningId(),
      timestamp: new Date().toISOString(),
      ...warningData
    };
    
    warningsData[guildId][userId][type].push(warning);
    
    // ÿ≠ŸÅÿ∏ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    await writeWarningsData(warningsData);
    
    console.log(`‚ö†Ô∏è [WARNINGS] Added ${type} warning for user ${userId} in guild ${guildId}`);
    return warning;
    
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error adding user warning:', error);
    throw error;
  }
}

/**
 * ÿπÿØ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * Count user warnings
 * @param {string} guildId - ŸÖÿπÿ±ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
 * @param {string} userId - ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * @param {string} type - ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
 * @param {number} timeWindow - ŸÜÿßŸÅÿ∞ÿ© ÿ≤ŸÖŸÜŸäÿ© ÿ®ÿßŸÑÿ≥ÿßÿπÿßÿ™ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿäÿ©)
 */
async function countUserWarnings(guildId, userId, type, timeWindow = null) {
  try {
    const warnings = await getUserWarnings(guildId, userId, type);
    
    if (!timeWindow) {
      return warnings.length;
    }
    
    // ŸÅŸÑÿ™ÿ±ÿ© ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑŸÜÿßŸÅÿ∞ÿ© ÿßŸÑÿ≤ŸÖŸÜŸäÿ©
    const cutoffTime = new Date(Date.now() - (timeWindow * 60 * 60 * 1000));
    const recentWarnings = warnings.filter(warning => 
      new Date(warning.timestamp) > cutoffTime
    );
    
    return recentWarnings.length;
    
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error counting user warnings:', error);
    return 0;
  }
}

/**
 * ŸÖÿ≥ÿ≠ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÇÿØŸäŸÖÿ©
 * Clear old user warnings
 * @param {string} guildId - ŸÖÿπÿ±ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
 * @param {string} userId - ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * @param {string} type - ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
 * @param {number} maxAge - ÿßŸÑÿπŸÖÿ± ÿßŸÑÿ£ŸÇÿµŸâ ÿ®ÿßŸÑÿ≥ÿßÿπÿßÿ™
 */
async function clearOldWarnings(guildId, userId, type, maxAge = 24) {
  try {
    const warningsData = await readWarningsData();
    
    if (!warningsData[guildId] || !warningsData[guildId][userId] || !warningsData[guildId][userId][type]) {
      return;
    }
    
    const cutoffTime = new Date(Date.now() - (maxAge * 60 * 60 * 1000));
    const recentWarnings = warningsData[guildId][userId][type].filter(warning => 
      new Date(warning.timestamp) > cutoffTime
    );
    
    warningsData[guildId][userId][type] = recentWarnings;
    
    // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿπÿØ ŸÑÿØŸäŸá ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
    if (Object.keys(warningsData[guildId][userId]).every(key => 
      warningsData[guildId][userId][key].length === 0
    )) {
      delete warningsData[guildId][userId];
    }
    
    // ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ÿ•ÿ∞ÿß ŸÑŸÖ ŸäÿπÿØ ŸÑÿØŸäŸá ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
    if (Object.keys(warningsData[guildId]).length === 0) {
      delete warningsData[guildId];
    }
    
    await writeWarningsData(warningsData);
    
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error clearing old warnings:', error);
  }
}

/**
 * ŸÖÿ≥ÿ≠ ÿ¨ŸÖŸäÿπ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * Clear all user warnings
 * @param {string} guildId - ŸÖÿπÿ±ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
 * @param {string} userId - ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
 * @param {string} type - ŸÜŸàÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ± (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)
 */
async function clearUserWarnings(guildId, userId, type = null) {
  try {
    const warningsData = await readWarningsData();
    
    if (!warningsData[guildId] || !warningsData[guildId][userId]) {
      return;
    }
    
    if (type) {
      // ŸÖÿ≥ÿ≠ ŸÜŸàÿπ ŸÖÿπŸäŸÜ ŸÖŸÜ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
      if (warningsData[guildId][userId][type]) {
        warningsData[guildId][userId][type] = [];
      }
    } else {
      // ŸÖÿ≥ÿ≠ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
      delete warningsData[guildId][userId];
    }
    
    // ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ÿ•ÿ∞ÿß ŸÑŸÖ ŸäÿπÿØ ŸÑÿØŸäŸá ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
    if (Object.keys(warningsData[guildId]).length === 0) {
      delete warningsData[guildId];
    }
    
    await writeWarningsData(warningsData);
    
    console.log(`üßπ [WARNINGS] Cleared ${type || 'all'} warnings for user ${userId} in guild ${guildId}`);
    
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error clearing user warnings:', error);
  }
}

/**
 * ÿ™ŸàŸÑŸäÿØ ŸÖÿπÿ±ŸÅ ŸÅÿ±ŸäÿØ ŸÑŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
 * Generate unique warning ID
 */
function generateWarningId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

/**
 * ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÇÿØŸäŸÖÿ© ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
 * Cleanup old warnings for all users
 * @param {number} maxAge - ÿßŸÑÿπŸÖÿ± ÿßŸÑÿ£ŸÇÿµŸâ ÿ®ÿßŸÑÿ≥ÿßÿπÿßÿ™
 */
async function cleanupOldWarnings(maxAge = 24) {
  try {
    const warningsData = await readWarningsData();
    const cutoffTime = new Date(Date.now() - (maxAge * 60 * 60 * 1000));
    let cleanedCount = 0;
    
    for (const guildId in warningsData) {
      for (const userId in warningsData[guildId]) {
        for (const type in warningsData[guildId][userId]) {
          const originalCount = warningsData[guildId][userId][type].length;
          warningsData[guildId][userId][type] = warningsData[guildId][userId][type].filter(warning => 
            new Date(warning.timestamp) > cutoffTime
          );
          cleanedCount += originalCount - warningsData[guildId][userId][type].length;
        }
        
        // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿπÿØ ŸÑÿØŸäŸá ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™
        if (Object.keys(warningsData[guildId][userId]).every(key => 
          warningsData[guildId][userId][key].length === 0
        )) {
          delete warningsData[guildId][userId];
        }
      }
      
      // ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ÿ•ÿ∞ÿß ŸÑŸÖ ŸäÿπÿØ ŸÑÿØŸäŸá ŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
      if (Object.keys(warningsData[guildId]).length === 0) {
        delete warningsData[guildId];
      }
    }
    
    await writeWarningsData(warningsData);
    
    if (cleanedCount > 0) {
      console.log(`üßπ [WARNINGS] Cleaned up ${cleanedCount} old warnings`);
    }
    
    return cleanedCount;
    
  } catch (error) {
    console.error('‚ùå [WARNINGS] Error during cleanup:', error);
    return 0;
  }
}

module.exports = {
  getUserWarnings,
  addUserWarning,
  countUserWarnings,
  clearOldWarnings,
  clearUserWarnings,
  cleanupOldWarnings
};