{
  "collection": {
    "item": [
      {
        "id": "952901a1-3935-453d-a3e0-180d283385e8",
        "name": "Create Profile",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 201', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "pm.test('Response has profile data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson).to.have.property('credits');",
                "    pm.expect(responseJson).to.have.property('xp');",
                "    pm.expect(responseJson).to.have.property('level');",
                "});",
                "",
                "pm.test('Profile has correct default values', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.credits).to.equal(0);",
                "    pm.expect(responseJson.xp).to.equal(0);",
                "    pm.expect(responseJson.level).to.equal(1);",
                "});"
              ],
              "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
            }
          }
        ]
      },
      {
        "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
        "name": "Get Profile",
        "request": {
          "url": {
            "path": [
              "{{testProfileId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Profile data is returned', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                "});",
                "",
                "pm.test('Profile has required fields', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('credits');",
                "    pm.expect(responseJson).to.have.property('xp');",
                "    pm.expect(responseJson).to.have.property('level');",
                "    pm.expect(responseJson).to.have.property('country');",
                "    pm.expect(responseJson).to.have.property('city');",
                "});"
              ],
              "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
            }
          }
        ]
      },
      {
        "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
        "name": "Update Profile",
        "request": {
          "url": {
            "path": [
              "{{testProfileId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Profile updated successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('credits');",
                "    pm.expect(responseJson.credits).to.equal(100);",
                "});",
                "",
                "pm.test('XP and level updated', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.xp).to.equal(500);",
                "    pm.expect(responseJson.level).to.equal(2);",
                "});"
              ],
              "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
            }
          }
        ]
      },
      {
        "id": "37dcab94-8390-4c68-a758-1e336e974af2",
        "name": "Delete Profile",
        "request": {
          "url": {
            "path": [
              "{{testProfileId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200 or 204', function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                "});",
                "",
                "pm.test('Profile deleted successfully', function () {",
                "    if (pm.response.code === 200) {",
                "        const responseJson = pm.response.json();",
                "        pm.expect(responseJson).to.have.property('message');",
                "    }",
                "});"
              ],
              "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
            }
          }
        ]
      },
      {
        "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
        "name": "Get Deleted Profile (Should Fail)",
        "request": {
          "url": {
            "path": [
              "{{testProfileId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 404', function () {",
                "    pm.response.to.have.status(404);",
                "});",
                "",
                "pm.test('Error message is returned', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('error');",
                "});"
              ],
              "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
            }
          }
        ]
      },
      {
        "id": "058c6561-696f-46e2-ab32-08563209bc06",
        "name": "Create Profile with Invalid Data",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 400', function () {",
                "    pm.response.to.have.status(400);",
                "});",
                "",
                "pm.test('Validation error is returned', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('error');",
                "});"
              ],
              "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:3000/api/v1/profiles",
        "key": "baseUrl"
      },
      {
        "type": "string",
        "value": "profile123",
        "key": "testProfileId"
      }
    ],
    "info": {
      "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
      "name": "Profile API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "اختبارات شاملة لـ Profile APIs",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "44026fec-55dc-4b7f-938c-0c80d2f13371",
    "name": "Profile API Test Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000/api/v1/profiles",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "p_1756217340771",
        "key": "testProfileId"
      }
    ]
  },
  "globals": {
    "id": "e11c5e51-98a2-409c-9a52-fd8ab4f2ae39",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 136,
      "responseMin": 43,
      "responseMax": 354,
      "responseSd": 109.7967819807727,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756217341215,
      "completed": 1756217345819
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a74f57c-6ff1-4115-9eb1-3b6ae3b191e2",
          "httpRequestId": "b3a7c5b4-4a0b-4a5b-a03b-7eda9b39da71"
        },
        "item": {
          "id": "952901a1-3935-453d-a3e0-180d283385e8",
          "name": "Create Profile",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "});",
                  "",
                  "pm.test('Profile has correct default values', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.credits).to.equal(0);",
                  "    pm.expect(responseJson.xp).to.equal(0);",
                  "    pm.expect(responseJson.level).to.equal(1);",
                  "});"
                ],
                "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04e10aad-c0f8-406d-9306-d4a6f08e801c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "138",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"id\":\"p_1756217340771\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
          }
        },
        "response": {
          "id": "a35bc164-92ff-447d-af80-e5f1c4ee73c9",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.170Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:02 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              115,
              101,
              114,
              116,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              101,
              120,
              105,
              115,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              112,
              95,
              49,
              55,
              53,
              54,
              50,
              49,
              55,
              51,
              52,
              48,
              55,
              55,
              49,
              34,
              44,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              115,
              34,
              58,
              48,
              44,
              34,
              120,
              112,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              108,
              101,
              118,
              101,
              108,
              34,
              58,
              49,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              83,
              97,
              117,
              100,
              105,
              32,
              65,
              114,
              97,
              98,
              105,
              97,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              82,
              105,
              121,
              97,
              100,
              104,
              34,
              44,
              34,
              98,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              115,
              34,
              58,
              34,
              91,
              93,
              34,
              44,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              95,
              98,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              52,
              58,
              48,
              57,
              58,
              48,
              50,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              52,
              58,
              48,
              57,
              58,
              48,
              50,
              46,
              50,
              49,
              54,
              90,
              34,
              125,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 105,
          "responseSize": 374
        },
        "id": "952901a1-3935-453d-a3e0-180d283385e8",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Response has profile data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has profile data",
              "message": "expected { success: true, …(2) } to have property 'id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Profile has correct default values",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Profile has correct default values",
              "message": "expected undefined to equal +0",
              "stack": "AssertionError: expected undefined to equal +0\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b7a66ea-c51d-47b7-a9f7-37a5899564bd",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0cf1b479-0cf2-4fa5-8986-93c41699a312"
        },
        "item": {
          "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
          "name": "Get Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "    pm.expect(responseJson).to.have.property('country');",
                  "    pm.expect(responseJson).to.have.property('city');",
                  "});"
                ],
                "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles",
              "p_1756217340771"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f42c6ae4-5e89-4cf7-8d14-75c5c4271d61",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6499fdb1-5a67-43df-b052-afe2c2c07e31",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.826Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:03 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              112,
              95,
              49,
              55,
              53,
              54,
              50,
              49,
              55,
              51,
              52,
              48,
              55,
              55,
              49,
              34,
              44,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              115,
              34,
              58,
              48,
              44,
              34,
              120,
              112,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              108,
              101,
              118,
              101,
              108,
              34,
              58,
              49,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              83,
              97,
              117,
              100,
              105,
              32,
              65,
              114,
              97,
              98,
              105,
              97,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              82,
              105,
              121,
              97,
              100,
              104,
              34,
              44,
              34,
              98,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              115,
              34,
              58,
              34,
              91,
              93,
              34,
              44,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              95,
              98,
              97,
              99,
              107,
              103,
              114,
              111,
              117,
              110,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              52,
              58,
              48,
              57,
              58,
              48,
              50,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              52,
              58,
              48,
              57,
              58,
              48,
              50,
              46,
              50,
              49,
              54,
              90,
              34,
              125,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 354,
          "responseSize": 296
        },
        "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Profile data is returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile data is returned",
              "message": "expected { success: true, …(2) } to have property 'id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Profile has required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Profile has required fields",
              "message": "expected { success: true, …(2) } to have property 'credits'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'credits'\n   at Object.eval sandbox-script.js:3:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e4736f5a-60ff-46a0-9b15-6070277b0e45",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7b8eec94-6525-4b26-a16c-202a19a291ed"
        },
        "item": {
          "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
          "name": "Update Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson.credits).to.equal(100);",
                  "});",
                  "",
                  "pm.test('XP and level updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.xp).to.equal(500);",
                  "    pm.expect(responseJson.level).to.equal(2);",
                  "});"
                ],
                "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles",
              "p_1756217340771"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eba4cd13-f173-4793-b368-8f0d1b626c1f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "124",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
          }
        },
        "response": {
          "id": "a69bcc9b-b04e-46b0-b5b4-617a08da19e4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:03.751Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:03 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              82,
              111,
              119,
              115,
              34,
              58,
              49,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 62,
          "responseSize": 91
        },
        "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Profile updated successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile updated successfully",
              "message": "expected { success: true, …(2) } to have property 'credits'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'credits'\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "XP and level updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "XP and level updated",
              "message": "expected undefined to equal 500",
              "stack": "AssertionError: expected undefined to equal 500\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "26caef86-52ef-4c63-9f9d-e767568c5242",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "99bb1501-53ef-4e78-ab77-aeda74d3c288"
        },
        "item": {
          "id": "37dcab94-8390-4c68-a758-1e336e974af2",
          "name": "Delete Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 204', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test('Profile deleted successfully', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles",
              "p_1756217340771"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4b6c27e9-788c-4c2f-992c-19e4ace34165",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c2375ea3-993a-4d96-9910-8196e5a69673",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.386Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 57,
          "responseSize": 57
        },
        "id": "37dcab94-8390-4c68-a758-1e336e974af2",
        "assertions": [
          {
            "assertion": "Status code is 200 or 204",
            "skipped": false
          },
          {
            "assertion": "Profile deleted successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d1114de4-41f0-40d6-8138-7a4a40f6adf9",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e70054f1-e32d-496b-8586-58774385bb9b"
        },
        "item": {
          "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
          "name": "Get Deleted Profile (Should Fail)",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles",
              "p_1756217340771"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c279bf6-88d1-4ecb-ad00-4ca6760ff549",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7610a882-e896-4d22-8f19-a693485c5945",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.993Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              110,
              117,
              108,
              108,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 195,
          "responseSize": 82
        },
        "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Error message is returned",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is returned",
              "message": "expected { success: true, …(2) } to have property 'error'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'error'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c002096b-8daa-476a-8823-1e95a6229a80",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2067453a-daee-47ab-b713-7547e28cdeca"
        },
        "item": {
          "id": "058c6561-696f-46e2-ab32-08563209bc06",
          "name": "Create Profile with Invalid Data",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "profiles"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c24ae85-e405-4a23-8cf9-e23f272fdeab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "66",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
          }
        },
        "response": {
          "id": "e363f640-ea65-4092-9833-fc3c7968738d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.752Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2577"
            },
            {
              "key": "ETag",
              "value": "W/\"a11-9Cwv+uaM+LXl1mqzojvuN8rRh0E\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              92,
              34,
              105,
              100,
              92,
              34,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              44,
              32,
              92,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              115,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              48,
              44,
              32,
              92,
              34,
              120,
              112,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              48,
              44,
              32,
              92,
              34,
              108,
              101,
              118,
              101,
              108,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              49,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              92,
              34,
              105,
              100,
              92,
              34,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              44,
              32,
              92,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              115,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              48,
              44,
              32,
              92,
              34,
              120,
              112,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              48,
              44,
              32,
              92,
              34,
              108,
              101,
              118,
              101,
              108,
              92,
              34,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              111,
              114,
              32,
              101,
              113,
              117,
              97,
              108,
              32,
              116,
              111,
              32,
              49,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              52,
              48,
              58,
              50,
              49,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              55,
              49,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              52,
              57,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              57,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              52,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 43,
          "responseSize": 2577
        },
        "id": "058c6561-696f-46e2-ab32-08563209bc06",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Validation error is returned",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 3477
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has profile data",
          "message": "expected { success: true, …(2) } to have property 'id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "276b69600f0d76215ece2f693aafaa30",
          "id": "2d1cf83c-32ec-4ef1-862a-351d4cb20147",
          "timestamp": 1756217342277,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "952901a1-3935-453d-a3e0-180d283385e8",
          "name": "Create Profile",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "});",
                  "",
                  "pm.test('Profile has correct default values', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.credits).to.equal(0);",
                  "    pm.expect(responseJson.xp).to.equal(0);",
                  "    pm.expect(responseJson.level).to.equal(1);",
                  "});"
                ],
                "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a74f57c-6ff1-4115-9eb1-3b6ae3b191e2",
          "httpRequestId": "b3a7c5b4-4a0b-4a5b-a03b-7eda9b39da71",
          "scriptId": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
          "execution": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Profile has correct default values",
          "message": "expected undefined to equal +0",
          "stack": "AssertionError: expected undefined to equal +0\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "f025426cb650b71673d08f8285a69b40",
          "id": "69bc019b-e854-42f4-a586-7cc6ff952f92",
          "timestamp": 1756217342279,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "952901a1-3935-453d-a3e0-180d283385e8",
          "name": "Create Profile",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "});",
                  "",
                  "pm.test('Profile has correct default values', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.credits).to.equal(0);",
                  "    pm.expect(responseJson.xp).to.equal(0);",
                  "    pm.expect(responseJson.level).to.equal(1);",
                  "});"
                ],
                "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a74f57c-6ff1-4115-9eb1-3b6ae3b191e2",
          "httpRequestId": "b3a7c5b4-4a0b-4a5b-a03b-7eda9b39da71",
          "scriptId": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
          "execution": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile data is returned",
          "message": "expected { success: true, …(2) } to have property 'id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "b6af4177ffe8370235a5bf6036b717f5",
          "id": "d43f735b-85e5-471b-a01d-f33351732242",
          "timestamp": 1756217343207,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
          "name": "Get Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "    pm.expect(responseJson).to.have.property('country');",
                  "    pm.expect(responseJson).to.have.property('city');",
                  "});"
                ],
                "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9b7a66ea-c51d-47b7-a9f7-37a5899564bd",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0cf1b479-0cf2-4fa5-8986-93c41699a312",
          "scriptId": "b35603c5-21c1-485e-a9ca-94aed658eaec",
          "execution": "08bab533-53de-49e4-8367-ff7482cb46e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Profile has required fields",
          "message": "expected { success: true, …(2) } to have property 'credits'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'credits'\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "eb1cbc7dd78bd13425edf12cb7177110",
          "id": "79fe1682-7ef4-47a8-b09d-db329b65142e",
          "timestamp": 1756217343209,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
          "name": "Get Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson).to.have.property('xp');",
                  "    pm.expect(responseJson).to.have.property('level');",
                  "    pm.expect(responseJson).to.have.property('country');",
                  "    pm.expect(responseJson).to.have.property('city');",
                  "});"
                ],
                "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9b7a66ea-c51d-47b7-a9f7-37a5899564bd",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0cf1b479-0cf2-4fa5-8986-93c41699a312",
          "scriptId": "b35603c5-21c1-485e-a9ca-94aed658eaec",
          "execution": "08bab533-53de-49e4-8367-ff7482cb46e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile updated successfully",
          "message": "expected { success: true, …(2) } to have property 'credits'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'credits'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "cda2fffe8bc30571e484ddeba2bc5075",
          "id": "1dad29a0-8d66-42dc-a0eb-2fc74e91387d",
          "timestamp": 1756217343824,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
          "name": "Update Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson.credits).to.equal(100);",
                  "});",
                  "",
                  "pm.test('XP and level updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.xp).to.equal(500);",
                  "    pm.expect(responseJson.level).to.equal(2);",
                  "});"
                ],
                "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e4736f5a-60ff-46a0-9b15-6070277b0e45",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7b8eec94-6525-4b26-a16c-202a19a291ed",
          "scriptId": "e4507894-7c4b-4add-babe-5e228f8051b5",
          "execution": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "XP and level updated",
          "message": "expected undefined to equal 500",
          "stack": "AssertionError: expected undefined to equal 500\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "6471225959266dfd2fa161e451cd382a",
          "id": "740bca85-f59c-463e-90ab-c29826c177fa",
          "timestamp": 1756217343825,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
          "name": "Update Profile",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('credits');",
                  "    pm.expect(responseJson.credits).to.equal(100);",
                  "});",
                  "",
                  "pm.test('XP and level updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.xp).to.equal(500);",
                  "    pm.expect(responseJson.level).to.equal(2);",
                  "});"
                ],
                "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e4736f5a-60ff-46a0-9b15-6070277b0e45",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7b8eec94-6525-4b26-a16c-202a19a291ed",
          "scriptId": "e4507894-7c4b-4add-babe-5e228f8051b5",
          "execution": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 200",
          "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "ad1a701580855ce96e1ea96ebcd2a818",
          "id": "cdd41801-428f-4247-978b-c982083c2905",
          "timestamp": 1756217345195,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
          "name": "Get Deleted Profile (Should Fail)",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d1114de4-41f0-40d6-8138-7a4a40f6adf9",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e70054f1-e32d-496b-8586-58774385bb9b",
          "scriptId": "2514cf05-6f21-4617-830f-cb34d0ecd278",
          "execution": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is returned",
          "message": "expected { success: true, …(2) } to have property 'error'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'error'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "29ef24220a64ffa948c08c2ba049a1be",
          "id": "2f453b99-0814-4731-a976-1d0b42bfbc75",
          "timestamp": 1756217345197,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
          "name": "Get Deleted Profile (Should Fail)",
          "request": {
            "url": {
              "path": [
                "{{testProfileId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "952901a1-3935-453d-a3e0-180d283385e8",
              "name": "Create Profile",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{testProfileId}}\",\"credits\":0,\"xp\":0,\"level\":1,\"country\":\"Saudi Arabia\",\"city\":\"Riyadh\",\"backgrounds\":\"[]\",\"active_background\":null}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6a6b59-6b46-4da0-a58f-e62a3c9c70fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has profile data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "});",
                      "",
                      "pm.test('Profile has correct default values', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.credits).to.equal(0);",
                      "    pm.expect(responseJson.xp).to.equal(0);",
                      "    pm.expect(responseJson.level).to.equal(1);",
                      "});"
                    ],
                    "_lastExecutionId": "bd8cc864-0138-49b1-a0ab-043e20b6bd82"
                  }
                }
              ]
            },
            {
              "id": "ca5b95d3-a8bb-4bdd-9c8f-5e39eb9d2a9f",
              "name": "Get Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b35603c5-21c1-485e-a9ca-94aed658eaec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.equal(pm.variables.get('testProfileId'));",
                      "});",
                      "",
                      "pm.test('Profile has required fields', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson).to.have.property('xp');",
                      "    pm.expect(responseJson).to.have.property('level');",
                      "    pm.expect(responseJson).to.have.property('country');",
                      "    pm.expect(responseJson).to.have.property('city');",
                      "});"
                    ],
                    "_lastExecutionId": "08bab533-53de-49e4-8367-ff7482cb46e3"
                  }
                }
              ]
            },
            {
              "id": "74cc590c-0d79-4e0c-bfc7-3fd3b65aba73",
              "name": "Update Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":100,\"xp\":500,\"level\":2,\"country\":\"Egypt\",\"city\":\"Cairo\",\"backgrounds\":\"['bg1', 'bg2']\",\"active_background\":\"bg1\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4507894-7c4b-4add-babe-5e228f8051b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('credits');",
                      "    pm.expect(responseJson.credits).to.equal(100);",
                      "});",
                      "",
                      "pm.test('XP and level updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.xp).to.equal(500);",
                      "    pm.expect(responseJson.level).to.equal(2);",
                      "});"
                    ],
                    "_lastExecutionId": "ad05b84e-90e3-48f4-9f39-a9caf0a36dc4"
                  }
                }
              ]
            },
            {
              "id": "37dcab94-8390-4c68-a758-1e336e974af2",
              "name": "Delete Profile",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "283e5ffe-e6d0-4d20-a140-7d1f4c10f0bf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 204', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                      "});",
                      "",
                      "pm.test('Profile deleted successfully', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const responseJson = pm.response.json();",
                      "        pm.expect(responseJson).to.have.property('message');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "2e481883-2a8d-4319-9055-497ebf07c71c"
                  }
                }
              ]
            },
            {
              "id": "51dd6653-7dc0-4945-84da-659c61e2be4e",
              "name": "Get Deleted Profile (Should Fail)",
              "request": {
                "url": {
                  "path": [
                    "{{testProfileId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514cf05-6f21-4617-830f-cb34d0ecd278",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
                  }
                }
              ]
            },
            {
              "id": "058c6561-696f-46e2-ab32-08563209bc06",
              "name": "Create Profile with Invalid Data",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"credits\":-10,\"xp\":-5,\"level\":0,\"country\":\"Egypt\",\"city\":\"Cairo\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf0c258c-140f-4c89-899d-5950287b93f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Validation error is returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "33c722a8-f396-40b9-b2e3-7246df74fc31"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:3000/api/v1/profiles",
              "key": "baseUrl"
            },
            {
              "type": "string",
              "value": "profile123",
              "key": "testProfileId"
            }
          ],
          "info": {
            "_postman_id": "cb9e2d44-2533-4c09-a417-aab591e96e60",
            "name": "Profile API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لـ Profile APIs",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d1114de4-41f0-40d6-8138-7a4a40f6adf9",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e70054f1-e32d-496b-8586-58774385bb9b",
          "scriptId": "2514cf05-6f21-4617-830f-cb34d0ecd278",
          "execution": "3ac3cdca-d4db-4f67-9f41-d272e35c0a57"
        }
      }
    ],
    "error": null
  }
}