{
  "collection": {
    "item": [
      {
        "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
        "name": "Create Vote",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 201', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "pm.test('Response has vote data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson).to.have.property('guild_id');",
                "    pm.expect(responseJson).to.have.property('channel_id');",
                "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                "    ",
                "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                "});"
              ],
              "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
            }
          }
        ]
      },
      {
        "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
        "name": "Get All Votes",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response is an array', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('array');",
                "});"
              ],
              "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
            }
          }
        ]
      },
      {
        "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
        "name": "Get Vote by ID",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct vote data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('id');",
                "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                "});"
              ],
              "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
            }
          }
        ]
      },
      {
        "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
        "name": "Get Vote by Guild ID",
        "request": {
          "url": {
            "path": [
              "guild",
              "{{testGuildId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct guild_id', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('guild_id');",
                "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                "});"
              ],
              "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
            }
          }
        ]
      },
      {
        "id": "62296095-013b-46c2-9abc-3996524c7849",
        "name": "Get Vote by Channel ID",
        "request": {
          "url": {
            "path": [
              "channel",
              "{{testChannelId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct channel_id', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('channel_id');",
                "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                "});"
              ],
              "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
            }
          }
        ]
      },
      {
        "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
        "name": "Get Vote by Message ID",
        "request": {
          "url": {
            "path": [
              "message",
              "{{testMessageId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct message_id', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message_id');",
                "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                "});"
              ],
              "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
            }
          }
        ]
      },
      {
        "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
        "name": "Get Vote by Rank Message ID",
        "request": {
          "url": {
            "path": [
              "rank-message",
              "{{testRankMsgId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct rank_message_id', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('rank_message_id');",
                "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                "});"
              ],
              "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
            }
          }
        ]
      },
      {
        "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
        "name": "Get Vote by Guild and Channel",
        "request": {
          "url": {
            "path": [
              "guild",
              "{{testGuildId}}",
              "channel",
              "{{testChannelId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has correct guild_id and channel_id', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('guild_id');",
                "    pm.expect(responseJson).to.have.property('channel_id');",
                "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                "});"
              ],
              "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
            }
          }
        ]
      },
      {
        "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
        "name": "Search Votes",
        "request": {
          "url": {
            "path": [
              "search"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "searchTerm",
                "value": "{{testGuildId}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response is an array', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('array');",
                "});"
              ],
              "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
            }
          }
        ]
      },
      {
        "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
        "name": "Get Vote Stats",
        "request": {
          "url": {
            "path": [
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has stats data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.be.an('object');",
                "});"
              ],
              "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
            }
          }
        ]
      },
      {
        "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
        "name": "Check Vote Exists",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}",
              "exists"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ac606657-2055-42b5-b28a-1dd47053475d",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response indicates vote exists', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('exists');",
                "    pm.expect(responseJson.exists).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
            }
          }
        ]
      },
      {
        "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
        "name": "Check Vote Exists by Guild ID",
        "request": {
          "url": {
            "path": [
              "guild",
              "{{testGuildId}}",
              "exists"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response indicates vote exists', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('exists');",
                "    pm.expect(responseJson.exists).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
            }
          }
        ]
      },
      {
        "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
        "name": "Update Vote",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has updated data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message_id');",
                "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                "});"
              ],
              "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
            }
          }
        ]
      },
      {
        "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
        "name": "Update Message ID",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}",
              "message"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Message ID updated successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message_id');",
                "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                "});"
              ],
              "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
            }
          }
        ]
      },
      {
        "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
        "name": "Update Rank Message ID",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}",
              "rank-message"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Rank Message ID updated successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('rank_message_id');",
                "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                "});"
              ],
              "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
            }
          }
        ]
      },
      {
        "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
        "name": "Update Channel ID",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}",
              "channel"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Channel ID updated successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('channel_id');",
                "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                "});"
              ],
              "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
            }
          }
        ]
      },
      {
        "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
        "name": "Create or Update Vote (Upsert)",
        "request": {
          "url": {
            "path": [
              "upsert"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200 or 201', function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test('Response has vote data', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('guild_id');",
                "    pm.expect(responseJson).to.have.property('channel_id');",
                "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                "});"
              ],
              "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
            }
          }
        ]
      },
      {
        "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
        "name": "Delete Vote by Guild ID",
        "request": {
          "url": {
            "path": [
              "guild",
              "tg_upsert_1756128570019"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Vote deleted successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message');",
                "});"
              ],
              "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
            }
          }
        ]
      },
      {
        "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
        "name": "Delete Vote",
        "request": {
          "url": {
            "path": [
              "{{createdVoteId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Vote deleted successfully', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('message');",
                "});"
              ],
              "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
            }
          }
        ]
      },
      {
        "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
        "name": "Test Invalid Vote Creation (Missing Required Fields)",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 400', function () {",
                "    pm.response.to.have.status(400);",
                "});",
                "",
                "pm.test('Response has validation error', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('error');",
                "});"
              ],
              "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
            }
          }
        ]
      },
      {
        "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
        "name": "Test Get Non-existent Vote",
        "request": {
          "url": {
            "path": [
              "999999"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
              "type": "text/javascript",
              "exec": [
                "pm.test('Status code is 404', function () {",
                "    pm.response.to.have.status(404);",
                "});",
                "",
                "pm.test('Response has not found error', function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson).to.have.property('error');",
                "});"
              ],
              "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "http://localhost:3000/api/v1/votes",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "tg_1756128570019",
        "key": "testGuildId"
      },
      {
        "type": "any",
        "value": "tc_1756128570019",
        "key": "testChannelId"
      },
      {
        "type": "any",
        "value": "tm_1756128570019",
        "key": "testMessageId"
      },
      {
        "type": "any",
        "value": "tr_1756128570019",
        "key": "testRankMsgId"
      },
      {
        "type": "any",
        "value": "",
        "key": "createdVoteId"
      }
    ],
    "info": {
      "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
      "name": "Votes API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "50f7c1fe-1188-431e-805a-e2b00fec9f75",
    "values": []
  },
  "globals": {
    "id": "9505ace2-1d97-47a3-9ecc-04a1b222645e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 42,
        "pending": 0,
        "failed": 31
      },
      "testScripts": {
        "total": 21,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 165.85714285714286,
      "responseMin": 7,
      "responseMax": 497,
      "responseSd": 187.76486960691932,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756217341542,
      "completed": 1756217346257
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 21,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "51550423-c0cb-4501-85c4-a2c4a523d9e3",
          "httpRequestId": "2760a8fb-0d48-4f36-8a0c-b5a590c0e362"
        },
        "item": {
          "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
          "name": "Create Vote",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "    ",
                  "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                  "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                  "});"
                ],
                "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b92395aa-ab2f-453a-a36d-4aec384bab56",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "157",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"tg_1756128570019\",\n    \"channel_id\": \"tc_1756128570019\",\n    \"message_id\": \"tm_1756128570019\",\n    \"rank_message_id\": \"tr_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "781424fe-33be-4a85-b26c-15c913135417",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:01.722Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:02 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              217,
              129,
              216,
              180,
              217,
              132,
              32,
              217,
              129,
              217,
              138,
              32,
              216,
              165,
              217,
              134,
              216,
              180,
              216,
              167,
              216,
              161,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 407,
          "responseSize": 86
        },
        "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has vote data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has vote data",
              "message": "expected { success: true, …(2) } to have property 'id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ea45d83b-381d-453a-a5b3-8b02959005f9",
          "length": 21,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "721b6647-bbd2-4ee6-9138-aabdf395c5df"
        },
        "item": {
          "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
          "name": "Get All Votes",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e07f676-53ef-465b-9b0f-2a8d4be36023",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "955a5ee8-c95d-499d-a44f-167368210460",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.183Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:02 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              172,
              217,
              132,
              216,
              168,
              32,
              216,
              172,
              217,
              133,
              217,
              138,
              216,
              185,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              216,
              167,
              216,
              170,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 49,
          "responseSize": 98
        },
        "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is an array",
              "message": "expected { success: true, …(2) } to be an array",
              "stack": "AssertionError: expected { success: true, …(2) } to be an array\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3c9cc019-ca0e-4478-8145-78bfa0a84da4",
          "length": 21,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "52838202-be6d-4be7-8397-09539b924683"
        },
        "item": {
          "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
          "name": "Get Vote by ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                  "});"
                ],
                "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c347d133-c068-42f8-8b50-ca1a8bc354a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a73f179e-ce62-4acd-bf17-039141dce3fb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.341Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:02 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              172,
              217,
              132,
              216,
              168,
              32,
              216,
              172,
              217,
              133,
              217,
              138,
              216,
              185,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              216,
              167,
              216,
              170,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 41,
          "responseSize": 98
        },
        "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has correct vote data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct vote data",
              "message": "expected { success: true, …(2) } to have property 'id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a8c83d2-eb6f-4652-b4fd-511efc2c90ab",
          "length": 21,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9cc16e94-068d-4b84-8ffd-9e3ac606ae5d"
        },
        "item": {
          "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
          "name": "Get Vote by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "});"
                ],
                "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "guild",
              "tg_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f5a68862-2806-404c-8897-332acbe7b7cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9263b3e2-bd76-41b3-a225-e8ad56c5c9ef",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.417Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:02 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              186,
              217,
              138,
              216,
              177,
              32,
              217,
              133,
              217,
              136,
              216,
              172,
              217,
              136,
              216,
              175,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 254,
          "responseSize": 61
        },
        "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response has correct guild_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct guild_id",
              "message": "expected { success: true, …(1) } to have property 'guild_id'",
              "stack": "AssertionError: expected { success: true, …(1) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3bb73b1a-4ce9-48a2-8cf3-ada8fb53cf42",
          "length": 21,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a6ae8754-a3f6-4e3f-81a3-fee5a1e84e72"
        },
        "item": {
          "id": "62296095-013b-46c2-9abc-3996524c7849",
          "name": "Get Vote by Channel ID",
          "request": {
            "url": {
              "path": [
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "channel",
              "tc_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bd1d068b-8608-4bbb-b73a-9c78ec5b491e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "03fab65d-7c60-4f35-b499-6073dd6f2ce8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:02.714Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:03 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              186,
              217,
              138,
              216,
              177,
              32,
              217,
              133,
              217,
              136,
              216,
              172,
              217,
              136,
              216,
              175,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 455,
          "responseSize": 61
        },
        "id": "62296095-013b-46c2-9abc-3996524c7849",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response has correct channel_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct channel_id",
              "message": "expected { success: true, …(1) } to have property 'channel_id'",
              "stack": "AssertionError: expected { success: true, …(1) } to have property 'channel_id'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "46dd1c7b-194a-4c11-8a87-4b8327fa9973",
          "length": 21,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c9941ebe-3469-470a-971f-394f34a78438"
        },
        "item": {
          "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
          "name": "Get Vote by Message ID",
          "request": {
            "url": {
              "path": [
                "message",
                "{{testMessageId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                  "});"
                ],
                "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "message",
              "tm_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a32267eb-b9ff-4d9a-b5fd-cdd6040084d7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7b5292d6-99f1-4318-8bbe-ef8f3fb3e9d4",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:03.242Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:03 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              186,
              217,
              138,
              216,
              177,
              32,
              217,
              133,
              217,
              136,
              216,
              172,
              217,
              136,
              216,
              175,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 426,
          "responseSize": 61
        },
        "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response has correct message_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct message_id",
              "message": "expected { success: true, …(1) } to have property 'message_id'",
              "stack": "AssertionError: expected { success: true, …(1) } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cfcacd4b-65db-47b7-8154-7e40abb55e6b",
          "length": 21,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fc0e72e5-40f9-46ce-826e-2199031a4529"
        },
        "item": {
          "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
          "name": "Get Vote by Rank Message ID",
          "request": {
            "url": {
              "path": [
                "rank-message",
                "{{testRankMsgId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct rank_message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                  "});"
                ],
                "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "rank-message",
              "tr_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35485bae-add2-49b7-b69f-003b34bde1d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3561d8f1-32d4-42b5-8858-7d9debae1098",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:03.741Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              186,
              217,
              138,
              216,
              177,
              32,
              217,
              133,
              217,
              136,
              216,
              172,
              217,
              136,
              216,
              175,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 440,
          "responseSize": 61
        },
        "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response has correct rank_message_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct rank_message_id",
              "message": "expected { success: true, …(1) } to have property 'rank_message_id'",
              "stack": "AssertionError: expected { success: true, …(1) } to have property 'rank_message_id'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4ce4a20-918e-4cdf-8159-2963cf50729c",
          "length": 21,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6ff601b6-3e51-4649-8532-9b2fb7598c9b"
        },
        "item": {
          "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
          "name": "Get Vote by Guild and Channel",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}",
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id and channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "guild",
              "tg_1756128570019",
              "channel",
              "tc_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c9452f7-f785-4336-89a1-c1214f8b379c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "43d2d92c-7316-4b35-8a7d-96b5444ed4bf",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.264Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              217,
              129,
              216,
              180,
              217,
              132,
              32,
              217,
              129,
              217,
              138,
              32,
              216,
              172,
              217,
              132,
              216,
              168,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              114,
              101,
              97,
              100,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              116,
              105,
              101,
              115,
              32,
              111,
              102,
              32,
              110,
              117,
              108,
              108,
              32,
              40,
              114,
              101,
              97,
              100,
              105,
              110,
              103,
              32,
              39,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              73,
              68,
              39,
              41,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 413,
          "responseSize": 134
        },
        "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response has correct guild_id and channel_id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has correct guild_id and channel_id",
              "message": "expected { success: true, …(2) } to have property 'guild_id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d37eb352-9a38-42e7-a03c-0bce81aac734",
          "length": 21,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07d66d8c-fda2-4de0-aad1-c19f4782c619"
        },
        "item": {
          "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
          "name": "Search Votes",
          "request": {
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "searchTerm",
                  "value": "{{testGuildId}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "searchTerm",
                "value": "tg_1756128570019"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f58d6364-7d4e-44e4-bb4a-8c3b59fba964",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b5901371-c358-4582-8071-4974de0f08e3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.725Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              167,
              217,
              132,
              216,
              168,
              216,
              173,
              216,
              171,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 34,
          "responseSize": 74
        },
        "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is an array",
              "message": "expected { success: true, …(2) } to be an array",
              "stack": "AssertionError: expected { success: true, …(2) } to be an array\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a52d7fa6-2f52-4780-bb8e-e12298e912e9",
          "length": 21,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "720f4999-75e9-4315-97e1-57c49a1bdd91"
        },
        "item": {
          "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
          "name": "Get Vote Stats",
          "request": {
            "url": {
              "path": [
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has stats data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "836af769-599a-49b1-8df5-fb1cbd7b5783",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c4d8b357-1923-4227-8a1c-33d7f2c4325d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.781Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              167,
              217,
              132,
              216,
              173,
              216,
              181,
              217,
              136,
              217,
              132,
              32,
              216,
              185,
              217,
              132,
              217,
              137,
              32,
              216,
              167,
              217,
              132,
              216,
              165,
              216,
              173,
              216,
              181,
              216,
              167,
              216,
              166,
              217,
              138,
              216,
              167,
              216,
              170,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              48,
              44,
              34,
              117,
              110,
              105,
              113,
              117,
              101,
              71,
              117,
              105,
              108,
              100,
              115,
              34,
              58,
              48,
              44,
              34,
              117,
              110,
              105,
              113,
              117,
              101,
              67,
              104,
              97,
              110,
              110,
              101,
              108,
              115,
              34,
              58,
              48,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 149
        },
        "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has stats data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2393e9c5-1f85-408a-ad69-76051c8caa3e",
          "length": 21,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "efae28d0-9787-4c4a-9371-53606ca485ed"
        },
        "item": {
          "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
          "name": "Check Vote Exists",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "exists"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates vote exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('exists');",
                  "    pm.expect(responseJson.exists).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "",
              "exists"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "73dd33e4-43a7-4510-8cdb-7fed6301f6ec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a8b990ed-98a9-44ab-bcf4-dea0abae0e5c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.854Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2333"
            },
            {
              "key": "ETag",
              "value": "W/\"91d-mDBBhL6atqRVSmuF7GmgJAOhbW4\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:04 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              217,
              138,
              216,
              172,
              216,
              168,
              32,
              216,
              163,
              217,
              134,
              32,
              217,
              138,
              217,
              131,
              217,
              136,
              217,
              134,
              32,
              216,
              177,
              217,
              130,
              217,
              133,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              216,
              167,
              217,
              132,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              217,
              138,
              216,
              172,
              216,
              168,
              32,
              216,
              163,
              217,
              134,
              32,
              217,
              138,
              217,
              131,
              217,
              136,
              217,
              134,
              32,
              216,
              177,
              217,
              130,
              217,
              133,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              52,
              48,
              58,
              50,
              49,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              55,
              49,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              52,
              57,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              57,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              52,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              55,
              54,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 2333
        },
        "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response indicates vote exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response indicates vote exists",
              "message": "expected { success: false, error: { …(4) } } to have property 'exists'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'exists'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f10ebd71-ad63-43f2-bb4a-e0129d4261d0",
          "length": 21,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f1c8805a-2d04-4b8b-a93b-de9b351f6e7c"
        },
        "item": {
          "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
          "name": "Check Vote Exists by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}",
                "exists"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates vote exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('exists');",
                  "    pm.expect(responseJson.exists).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "guild",
              "tg_1756128570019",
              "exists"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "203b8448-91be-4bd3-b4c6-592bbb88254c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "85fd69d2-e161-46e9-a0cc-497e122d19ea",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:04.904Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              173,
              217,
              130,
              217,
              130,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 281,
          "responseSize": 89
        },
        "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response indicates vote exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response indicates vote exists",
              "message": "expected { success: true, …(2) } to have property 'exists'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'exists'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9ae549f7-ded9-4e65-ac0d-0279f47b3802",
          "length": 21,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8e7104d5-f7f7-4eda-92ba-2aaf0a387e4e"
        },
        "item": {
          "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
          "name": "Update Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "303bdbc8-cc2b-4cb2-ac0f-c6705e6e471c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "99",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "5dd4a75a-380e-4114-9f97-7f89f42fa26d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.235Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2276"
            },
            {
              "key": "ETag",
              "value": "W/\"8e4-fpBfsz3T3nSnv3gRlRSh8aSsQ4w\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              47,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              53,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              52,
              54,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              45,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              56,
              55,
              58,
              55,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              85,
              84,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 2276
        },
        "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response has updated data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has updated data",
              "message": "expected { success: false, error: { …(4) } } to have property 'message_id'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f41b73a2-d8f7-46b4-a834-9f46346bb349",
          "length": 21,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bd8cd2e0-c59d-40ad-87f3-0f472be9ea8c"
        },
        "item": {
          "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
          "name": "Update Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "66b2130d-a203-4b4e-ad6b-c2c38c34f1cd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "594898b0-9589-4963-889d-239771526a7a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.293Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2302"
            },
            {
              "key": "ETag",
              "value": "W/\"8fe-RPqt8uBpWSvljhrpl0cHXgJ3AlA\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              47,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              53,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              52,
              54,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              45,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              56,
              55,
              58,
              55,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              65,
              84,
              67,
              72,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 2302
        },
        "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Message ID updated successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Message ID updated successfully",
              "message": "expected { success: false, error: { …(4) } } to have property 'message_id'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "57aea519-fcf7-4c59-9e42-87c2e2c87f0e",
          "length": 21,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0417f4e7-2f17-4d78-9a2c-9bffb5c0297c"
        },
        "item": {
          "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
          "name": "Update Rank Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "rank-message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Rank Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "",
              "rank-message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6cccb58-2b69-4792-bee9-fa44252bd281",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "49",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "de543fb8-4b7e-43dd-8861-e9a014ffcac6",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.368Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2317"
            },
            {
              "key": "ETag",
              "value": "W/\"90d-+yJLR5XQYQv1K2ODGzPeUxkg2Ho\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              114,
              97,
              110,
              107,
              45,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              114,
              97,
              110,
              107,
              45,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              47,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              53,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              52,
              54,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              45,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              56,
              55,
              58,
              55,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              114,
              97,
              110,
              107,
              45,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              65,
              84,
              67,
              72,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 2317
        },
        "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Rank Message ID updated successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Rank Message ID updated successfully",
              "message": "expected { success: false, error: { …(4) } } to have property 'rank_message_id'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'rank_message_id'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "68e30725-c711-42f9-a51e-d4612e15f7bb",
          "length": 21,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55c9f598-4045-4681-9781-915bb9831e6b"
        },
        "item": {
          "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
          "name": "Update Channel ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "channel"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Channel ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "",
              "channel"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02084230-4990-465f-9f87-c1e8ae93ee39",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "87dfd399-8256-4518-b150-a84cb0446bdd",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.424Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2302"
            },
            {
              "key": "ETag",
              "value": "W/\"8fe-PNR9Hpr2Ub7+Ozyo3RzkkVIst3g\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              47,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              53,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              52,
              54,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              45,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              56,
              55,
              58,
              55,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              47,
              99,
              104,
              97,
              110,
              110,
              101,
              108,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              65,
              84,
              67,
              72,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 2302
        },
        "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Channel ID updated successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Channel ID updated successfully",
              "message": "expected { success: false, error: { …(4) } } to have property 'channel_id'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'channel_id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4434c12a-093a-4b3c-af70-d43d27e0efb8",
          "length": 21,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3229ed6b-1dd6-48b3-8d49-4fcde48c76ef"
        },
        "item": {
          "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
          "name": "Create or Update Vote (Upsert)",
          "request": {
            "url": {
              "path": [
                "upsert"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "upsert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b57c8ea5-deac-4f26-99d6-b612d4b84d6c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "185",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
          }
        },
        "response": {
          "id": "711c7cc6-2c61-42e5-8218-d491086ad41a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.471Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              217,
              129,
              216,
              180,
              217,
              132,
              32,
              217,
              129,
              217,
              138,
              32,
              216,
              165,
              217,
              134,
              216,
              180,
              216,
              167,
              216,
              161,
              32,
              216,
              163,
              217,
              136,
              32,
              216,
              170,
              216,
              173,
              216,
              175,
              217,
              138,
              216,
              171,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              103,
              101,
              116,
              86,
              111,
              116,
              101,
              66,
              121,
              71,
              117,
              105,
              108,
              100,
              73,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 133
        },
        "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
        "assertions": [
          {
            "assertion": "Status code is 200 or 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 201",
              "message": "expected 400 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 400 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Response has vote data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has vote data",
              "message": "expected { success: true, …(2) } to have property 'guild_id'",
              "stack": "AssertionError: expected { success: true, …(2) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0262bd84-b89f-4e04-bfcb-08ecbb19fee3",
          "length": 21,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19c03cb9-9972-4bba-9bb7-3182339d28fc"
        },
        "item": {
          "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
          "name": "Delete Vote by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "tg_upsert_1756128570019"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Vote deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "guild",
              "tg_upsert_1756128570019"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eaa81784-5dc7-40f2-be7c-74477445c0c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "f821d86d-e814-4897-a7dd-40b07200ee1f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.526Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              170,
              217,
              133,
              32,
              216,
              173,
              216,
              176,
              217,
              129,
              32,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              168,
              217,
              134,
              216,
              172,
              216,
              167,
              216,
              173,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 66
        },
        "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Vote deleted successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "518254a5-e7d6-47c8-b6ef-d6aed3bcd57f",
          "length": 21,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f96a8ff7-77c3-4d1b-b0b6-7ffd7ea3468f"
        },
        "item": {
          "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
          "name": "Delete Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Vote deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f0dfa79a-55b4-4242-b258-2f9f7b4638bf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "d91f73fc-1d48-4aa2-9ae1-2dda08ed9b1c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.579Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2279"
            },
            {
              "key": "ETag",
              "value": "W/\"8e7-Z9UISY41YYAKpsJp9MuynDhpkHU\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              32,
              45,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              47,
              110,
              111,
              116,
              70,
              111,
              117,
              110,
              100,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              53,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              52,
              54,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              54,
              53,
              58,
              49,
              52,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              45,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              56,
              55,
              58,
              55,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              47,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              68,
              69,
              76,
              69,
              84,
              69,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 2279
        },
        "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Vote deleted successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Vote deleted successfully",
              "message": "expected { success: false, error: { …(4) } } to have property 'message'",
              "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa036aea-bea4-4d3a-891f-0317f9eb9539",
          "length": 21,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c374029a-0956-4f07-9663-570cac60ccf3"
        },
        "item": {
          "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
          "name": "Test Invalid Vote Creation (Missing Required Fields)",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1fbe1fc-ed5f-470d-885c-ddda55ed8b87",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "22",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"guild_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "16022476-f87b-4dad-b22f-c846573273fc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.637Z"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2396"
            },
            {
              "key": "ETag",
              "value": "W/\"95c-j57AsXoQDICtgdTjvIWht+GhSfI\""
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:05 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              216,
              167,
              217,
              132,
              216,
              174,
              216,
              167,
              216,
              175,
              217,
              133,
              32,
              217,
              133,
              216,
              183,
              217,
              132,
              217,
              136,
              216,
              168,
              44,
              32,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              216,
              167,
              217,
              132,
              217,
              130,
              217,
              134,
              216,
              167,
              216,
              169,
              32,
              217,
              133,
              216,
              183,
              217,
              132,
              217,
              136,
              216,
              168,
              34,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              216,
              167,
              217,
              132,
              216,
              174,
              216,
              167,
              216,
              175,
              217,
              133,
              32,
              217,
              133,
              216,
              183,
              217,
              132,
              217,
              136,
              216,
              168,
              44,
              32,
              217,
              133,
              216,
              185,
              216,
              177,
              217,
              129,
              32,
              216,
              167,
              217,
              132,
              217,
              130,
              217,
              134,
              216,
              167,
              216,
              169,
              32,
              217,
              133,
              216,
              183,
              217,
              132,
              217,
              136,
              216,
              168,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              77,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              32,
              40,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              52,
              48,
              58,
              50,
              49,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              102,
              105,
              108,
              101,
              58,
              47,
              47,
              47,
              67,
              58,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              109,
              111,
              104,
              97,
              109,
              47,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              47,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              47,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              47,
              115,
              114,
              99,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              115,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              46,
              106,
              115,
              58,
              55,
              49,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              52,
              57,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              57,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              52,
              58,
              49,
              53,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              55,
              53,
              58,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              114,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              55,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              91,
              97,
              115,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              93,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              57,
              53,
              58,
              53,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              116,
              114,
              105,
              109,
              95,
              112,
              114,
              101,
              102,
              105,
              120,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              50,
              56,
              58,
              49,
              51,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              54,
              58,
              57,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              95,
              112,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              52,
              54,
              58,
              49,
              50,
              41,
              92,
              110,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              67,
              58,
              92,
              92,
              85,
              115,
              101,
              114,
              115,
              92,
              92,
              109,
              111,
              104,
              97,
              109,
              92,
              92,
              79,
              110,
              101,
              68,
              114,
              105,
              118,
              101,
              92,
              92,
              68,
              101,
              115,
              107,
              116,
              111,
              112,
              92,
              92,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              80,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              45,
              109,
              97,
              105,
              110,
              92,
              92,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              92,
              92,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              92,
              92,
              108,
              105,
              98,
              92,
              92,
              114,
              111,
              117,
              116,
              101,
              114,
              92,
              92,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              56,
              48,
              58,
              49,
              48,
              41,
              34,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              118,
              111,
              116,
              101,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 2396
        },
        "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Response has validation error",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7f28f515-af6c-4964-81f3-fc47a9c23de8",
          "length": 21,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "95a23a92-2aa7-4ab5-ac41-0b4a7766981a"
        },
        "item": {
          "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
          "name": "Test Get Non-existent Vote",
          "request": {
            "url": {
              "path": [
                "999999"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has not found error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "v1",
              "votes",
              "999999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e21df440-9ae4-4ba9-a5e5-7ebf8240b72e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "657436bf-0e24-4378-81b1-2cc66aae3f28",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';script-src 'self' 'unsafe-inline';style-src 'self' 'unsafe-inline';img-src 'self' data:;connect-src 'self';font-src 'self';object-src 'none';frame-src 'none';upgrade-insecure-requests;base-uri 'self';form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
            },
            {
              "key": "Cross-Origin-Embedder-Policy",
              "value": "require-corp"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "100"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "99"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "2025-08-26T14:24:05.718Z"
            },
            {
              "key": "Date",
              "value": "Tue, 26 Aug 2025 14:09:06 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              216,
              167,
              217,
              132,
              216,
              170,
              216,
              181,
              217,
              136,
              217,
              138,
              216,
              170,
              32,
              216,
              186,
              217,
              138,
              216,
              177,
              32,
              217,
              133,
              217,
              136,
              216,
              172,
              217,
              136,
              216,
              175,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 497,
          "responseSize": 61
        },
        "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response has not found error",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has not found error",
              "message": "expected { success: true, …(1) } to have property 'error'",
              "stack": "AssertionError: expected { success: true, …(1) } to have property 'error'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 17437
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "07f314d63800094e22e662fde7069e53",
          "id": "d4dcb047-4f2c-4ad0-8423-483359bc5f29",
          "timestamp": 1756217342118,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
          "name": "Create Vote",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "    ",
                  "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                  "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                  "});"
                ],
                "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 21,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "51550423-c0cb-4501-85c4-a2c4a523d9e3",
          "httpRequestId": "2760a8fb-0d48-4f36-8a0c-b5a590c0e362",
          "scriptId": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
          "execution": "36909d9c-67b3-4b7d-9b23-369e1491a814"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has vote data",
          "message": "expected { success: true, …(2) } to have property 'id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "c19b3fdc2a66ae74220ecbd6ebaaea6a",
          "id": "c0b52ade-173c-40d3-bfde-7ad16b183ada",
          "timestamp": 1756217342121,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
          "name": "Create Vote",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "    ",
                  "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                  "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                  "});"
                ],
                "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 21,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "51550423-c0cb-4501-85c4-a2c4a523d9e3",
          "httpRequestId": "2760a8fb-0d48-4f36-8a0c-b5a590c0e362",
          "scriptId": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
          "execution": "36909d9c-67b3-4b7d-9b23-369e1491a814"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is an array",
          "message": "expected { success: true, …(2) } to be an array",
          "stack": "AssertionError: expected { success: true, …(2) } to be an array\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "ff13c0eac9917baf6d853ec65a767683",
          "id": "ef173c2e-1e9e-4075-bdd6-28ffd9b9a269",
          "timestamp": 1756217342256,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
          "name": "Get All Votes",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ea45d83b-381d-453a-a5b3-8b02959005f9",
          "length": 21,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "721b6647-bbd2-4ee6-9138-aabdf395c5df",
          "scriptId": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
          "execution": "2fe3d33d-3696-4d46-8206-0b642190eb05"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct vote data",
          "message": "expected { success: true, …(2) } to have property 'id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "01111c5ae3f42bcd0896b1d679a5349b",
          "id": "caa4ba43-ccff-4d81-b41c-8ff42d279c95",
          "timestamp": 1756217342388,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
          "name": "Get Vote by ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                  "});"
                ],
                "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "3c9cc019-ca0e-4478-8145-78bfa0a84da4",
          "length": 21,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "52838202-be6d-4be7-8397-09539b924683",
          "scriptId": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
          "execution": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "0c350660899225a8fa110255bb972775",
          "id": "1ee494d8-b8f4-4674-913d-d121a3d1c75e",
          "timestamp": 1756217342676,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
          "name": "Get Vote by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "});"
                ],
                "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7a8c83d2-eb6f-4652-b4fd-511efc2c90ab",
          "length": 21,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9cc16e94-068d-4b84-8ffd-9e3ac606ae5d",
          "scriptId": "1fa9441d-832e-465d-b70c-d211c56301c8",
          "execution": "90af439e-4cae-410c-a45d-7236bb317d5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct guild_id",
          "message": "expected { success: true, …(1) } to have property 'guild_id'",
          "stack": "AssertionError: expected { success: true, …(1) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "157cc09d9a2d90928a2cdbf67043cd9c",
          "id": "2f45c7df-2caf-4b52-b66d-6f60bc172147",
          "timestamp": 1756217342677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
          "name": "Get Vote by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "});"
                ],
                "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7a8c83d2-eb6f-4652-b4fd-511efc2c90ab",
          "length": 21,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9cc16e94-068d-4b84-8ffd-9e3ac606ae5d",
          "scriptId": "1fa9441d-832e-465d-b70c-d211c56301c8",
          "execution": "90af439e-4cae-410c-a45d-7236bb317d5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "8a4882d3a4f402892b197ec6da8e9bb6",
          "id": "f467d677-094e-435e-986c-26ecbe3f4e50",
          "timestamp": 1756217343196,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "62296095-013b-46c2-9abc-3996524c7849",
          "name": "Get Vote by Channel ID",
          "request": {
            "url": {
              "path": [
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "3bb73b1a-4ce9-48a2-8cf3-ada8fb53cf42",
          "length": 21,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a6ae8754-a3f6-4e3f-81a3-fee5a1e84e72",
          "scriptId": "edc805d5-becb-4bb2-8758-be81c5742acc",
          "execution": "c9a910b7-743e-4f11-9ad1-742c18526960"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct channel_id",
          "message": "expected { success: true, …(1) } to have property 'channel_id'",
          "stack": "AssertionError: expected { success: true, …(1) } to have property 'channel_id'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "95534a85b4390b64e948037ee921bb45",
          "id": "49a574d9-406d-4c3b-957e-eaa43b3ba598",
          "timestamp": 1756217343198,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "62296095-013b-46c2-9abc-3996524c7849",
          "name": "Get Vote by Channel ID",
          "request": {
            "url": {
              "path": [
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "3bb73b1a-4ce9-48a2-8cf3-ada8fb53cf42",
          "length": 21,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a6ae8754-a3f6-4e3f-81a3-fee5a1e84e72",
          "scriptId": "edc805d5-becb-4bb2-8758-be81c5742acc",
          "execution": "c9a910b7-743e-4f11-9ad1-742c18526960"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a280758057fce38f11f64aa616522bd1",
          "id": "677acd4a-c34d-4add-811d-28ecbff8bdda",
          "timestamp": 1756217343691,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
          "name": "Get Vote by Message ID",
          "request": {
            "url": {
              "path": [
                "message",
                "{{testMessageId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                  "});"
                ],
                "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "46dd1c7b-194a-4c11-8a87-4b8327fa9973",
          "length": 21,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c9941ebe-3469-470a-971f-394f34a78438",
          "scriptId": "bcdd4f01-efaa-4376-92e3-78381a056368",
          "execution": "622e932b-1afa-494e-b27f-54888f0e463e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct message_id",
          "message": "expected { success: true, …(1) } to have property 'message_id'",
          "stack": "AssertionError: expected { success: true, …(1) } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8d791668d081cb57835a836b136ab1ba",
          "id": "158752a0-c2ef-4be7-8bfb-bf6c340eb480",
          "timestamp": 1756217343693,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
          "name": "Get Vote by Message ID",
          "request": {
            "url": {
              "path": [
                "message",
                "{{testMessageId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                  "});"
                ],
                "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "46dd1c7b-194a-4c11-8a87-4b8327fa9973",
          "length": 21,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c9941ebe-3469-470a-971f-394f34a78438",
          "scriptId": "bcdd4f01-efaa-4376-92e3-78381a056368",
          "execution": "622e932b-1afa-494e-b27f-54888f0e463e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "e4038d2710c70f326817de976e589354",
          "id": "ab0abc1d-a3e1-49db-8849-8f2249f0dd52",
          "timestamp": 1756217344186,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
          "name": "Get Vote by Rank Message ID",
          "request": {
            "url": {
              "path": [
                "rank-message",
                "{{testRankMsgId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct rank_message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                  "});"
                ],
                "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cfcacd4b-65db-47b7-8154-7e40abb55e6b",
          "length": 21,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fc0e72e5-40f9-46ce-826e-2199031a4529",
          "scriptId": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
          "execution": "c457caab-03ab-4db2-8503-2dfb73c67792"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct rank_message_id",
          "message": "expected { success: true, …(1) } to have property 'rank_message_id'",
          "stack": "AssertionError: expected { success: true, …(1) } to have property 'rank_message_id'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "14d53a1dbdad1310cdde4afc26732c1b",
          "id": "b154e4b3-37fc-4568-8fd9-e0fa70dbbead",
          "timestamp": 1756217344188,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
          "name": "Get Vote by Rank Message ID",
          "request": {
            "url": {
              "path": [
                "rank-message",
                "{{testRankMsgId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct rank_message_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                  "});"
                ],
                "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cfcacd4b-65db-47b7-8154-7e40abb55e6b",
          "length": 21,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fc0e72e5-40f9-46ce-826e-2199031a4529",
          "scriptId": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
          "execution": "c457caab-03ab-4db2-8503-2dfb73c67792"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "42ae30cde23ec0a499343a1bff359dbf",
          "id": "cf8bdac3-b6fc-4bf5-a5ca-e16a955c8c40",
          "timestamp": 1756217344680,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
          "name": "Get Vote by Guild and Channel",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}",
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id and channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "b4ce4a20-918e-4cdf-8159-2963cf50729c",
          "length": 21,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6ff601b6-3e51-4649-8532-9b2fb7598c9b",
          "scriptId": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
          "execution": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has correct guild_id and channel_id",
          "message": "expected { success: true, …(2) } to have property 'guild_id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "838a9337106b2da7670d1b12bbe5033d",
          "id": "cd2ade19-9b65-49c1-a8d6-2de9eb9e5560",
          "timestamp": 1756217344682,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
          "name": "Get Vote by Guild and Channel",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}",
                "channel",
                "{{testChannelId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct guild_id and channel_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                  "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                  "});"
                ],
                "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "b4ce4a20-918e-4cdf-8159-2963cf50729c",
          "length": 21,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6ff601b6-3e51-4649-8532-9b2fb7598c9b",
          "scriptId": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
          "execution": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is an array",
          "message": "expected { success: true, …(2) } to be an array",
          "stack": "AssertionError: expected { success: true, …(2) } to be an array\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "488575e249bc17c45506ff03a98e9d6a",
          "id": "9cd3ad80-b0b5-44d6-afdb-81dd591acf2a",
          "timestamp": 1756217344765,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
          "name": "Search Votes",
          "request": {
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "searchTerm",
                  "value": "{{testGuildId}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d37eb352-9a38-42e7-a03c-0bce81aac734",
          "length": 21,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07d66d8c-fda2-4de0-aad1-c19f4782c619",
          "scriptId": "46bb562b-aad8-427d-949f-cbde3bbbc220",
          "execution": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "cbda9666fe125e0354eb1a47552572d5",
          "id": "927cf76b-4318-417a-9876-0001fa4ee1bc",
          "timestamp": 1756217344877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
          "name": "Check Vote Exists",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "exists"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates vote exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('exists');",
                  "    pm.expect(responseJson.exists).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2393e9c5-1f85-408a-ad69-76051c8caa3e",
          "length": 21,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "efae28d0-9787-4c4a-9371-53606ca485ed",
          "scriptId": "ac606657-2055-42b5-b28a-1dd47053475d",
          "execution": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response indicates vote exists",
          "message": "expected { success: false, error: { …(4) } } to have property 'exists'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'exists'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "0cbd590730e6ac7ab005d2f730713286",
          "id": "ce5ddbb0-7628-4dad-8bed-281203798947",
          "timestamp": 1756217344880,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
          "name": "Check Vote Exists",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "exists"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates vote exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('exists');",
                  "    pm.expect(responseJson.exists).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2393e9c5-1f85-408a-ad69-76051c8caa3e",
          "length": 21,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "efae28d0-9787-4c4a-9371-53606ca485ed",
          "scriptId": "ac606657-2055-42b5-b28a-1dd47053475d",
          "execution": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response indicates vote exists",
          "message": "expected { success: true, …(2) } to have property 'exists'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'exists'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "d9d56569359d2c70a81386911ccee9c9",
          "id": "3df23d27-5f1d-4ff0-a7c0-75076a1083f9",
          "timestamp": 1756217345211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
          "name": "Check Vote Exists by Guild ID",
          "request": {
            "url": {
              "path": [
                "guild",
                "{{testGuildId}}",
                "exists"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates vote exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('exists');",
                  "    pm.expect(responseJson.exists).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "f10ebd71-ad63-43f2-bb4a-e0129d4261d0",
          "length": 21,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f1c8805a-2d04-4b8b-a93b-de9b351f6e7c",
          "scriptId": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
          "execution": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "3ef72f37c1072e5e0e092faa5c9c5553",
          "id": "d010bdbc-d4c0-4f9f-955e-c944ec15a1cc",
          "timestamp": 1756217345255,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
          "name": "Update Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9ae549f7-ded9-4e65-ac0d-0279f47b3802",
          "length": 21,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8e7104d5-f7f7-4eda-92ba-2aaf0a387e4e",
          "scriptId": "22652f5a-8cef-4932-9ce9-2ad5485808da",
          "execution": "65588529-94cc-4b1c-99f6-24cee49719d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has updated data",
          "message": "expected { success: false, error: { …(4) } } to have property 'message_id'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "03a8703a855d66723274d430b666a532",
          "id": "bb599fcc-dd9f-43ac-b80d-fb1e97c7aaf7",
          "timestamp": 1756217345257,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
          "name": "Update Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9ae549f7-ded9-4e65-ac0d-0279f47b3802",
          "length": 21,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8e7104d5-f7f7-4eda-92ba-2aaf0a387e4e",
          "scriptId": "22652f5a-8cef-4932-9ce9-2ad5485808da",
          "execution": "65588529-94cc-4b1c-99f6-24cee49719d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "8d356b83396260e1bdb035ac0d78ac8d",
          "id": "cc12910f-14ae-4dc8-9c45-4c04f09499c9",
          "timestamp": 1756217345332,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
          "name": "Update Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "f41b73a2-d8f7-46b4-a834-9f46346bb349",
          "length": 21,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bd8cd2e0-c59d-40ad-87f3-0f472be9ea8c",
          "scriptId": "0aac522c-d609-4f58-b1d5-87ce7e467312",
          "execution": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Message ID updated successfully",
          "message": "expected { success: false, error: { …(4) } } to have property 'message_id'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message_id'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "eaec9a2aef596c82751910e0ca4d3156",
          "id": "7d3d04ff-acb4-4142-bab6-974bcfad38f8",
          "timestamp": 1756217345334,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
          "name": "Update Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message_id');",
                  "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "f41b73a2-d8f7-46b4-a834-9f46346bb349",
          "length": 21,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bd8cd2e0-c59d-40ad-87f3-0f472be9ea8c",
          "scriptId": "0aac522c-d609-4f58-b1d5-87ce7e467312",
          "execution": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "73191a3039f574bba2bfd042dae80039",
          "id": "bc0622d7-d4ef-4da9-80a7-d98f25856ed2",
          "timestamp": 1756217345395,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
          "name": "Update Rank Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "rank-message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Rank Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "57aea519-fcf7-4c59-9e42-87c2e2c87f0e",
          "length": 21,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0417f4e7-2f17-4d78-9a2c-9bffb5c0297c",
          "scriptId": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
          "execution": "04988857-883e-4a26-bb93-d1c629792124"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Rank Message ID updated successfully",
          "message": "expected { success: false, error: { …(4) } } to have property 'rank_message_id'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'rank_message_id'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "a4ee5f9617960c519ce3d1b1e8930dad",
          "id": "c1a3ff14-56f4-4adb-b97e-61381f8e49f0",
          "timestamp": 1756217345397,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
          "name": "Update Rank Message ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "rank-message"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Rank Message ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rank_message_id');",
                  "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "57aea519-fcf7-4c59-9e42-87c2e2c87f0e",
          "length": 21,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0417f4e7-2f17-4d78-9a2c-9bffb5c0297c",
          "scriptId": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
          "execution": "04988857-883e-4a26-bb93-d1c629792124"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "e0614d82b244d762fa9695f232757590",
          "id": "e34c8b14-37ac-49fa-ade2-23e76fab9c2a",
          "timestamp": 1756217345437,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
          "name": "Update Channel ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "channel"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Channel ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "68e30725-c711-42f9-a51e-d4612e15f7bb",
          "length": 21,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55c9f598-4045-4681-9781-915bb9831e6b",
          "scriptId": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
          "execution": "d9c29710-b023-4d7a-937a-c6edfb278071"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Channel ID updated successfully",
          "message": "expected { success: false, error: { …(4) } } to have property 'channel_id'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'channel_id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "c3f4b1b8108a71fb5d62953a3bdda060",
          "id": "73f0045a-a15b-4c4a-99ca-6d9c5c4873f9",
          "timestamp": 1756217345438,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
          "name": "Update Channel ID",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}",
                "channel"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Channel ID updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "68e30725-c711-42f9-a51e-d4612e15f7bb",
          "length": 21,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55c9f598-4045-4681-9781-915bb9831e6b",
          "scriptId": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
          "execution": "d9c29710-b023-4d7a-937a-c6edfb278071"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 201",
          "message": "expected 400 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 400 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "7ff97c059a0163c6146b5808504250bc",
          "id": "39e3acdb-09de-42ec-a732-fbe48272c766",
          "timestamp": 1756217345491,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
          "name": "Create or Update Vote (Upsert)",
          "request": {
            "url": {
              "path": [
                "upsert"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4434c12a-093a-4b3c-af70-d43d27e0efb8",
          "length": 21,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3229ed6b-1dd6-48b3-8d49-4fcde48c76ef",
          "scriptId": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
          "execution": "650d8b36-a9c0-4c47-996c-0c263a90d190"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has vote data",
          "message": "expected { success: true, …(2) } to have property 'guild_id'",
          "stack": "AssertionError: expected { success: true, …(2) } to have property 'guild_id'\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "9e8b6933c4d492b56ecf134f608a4243",
          "id": "fffa4c9d-74f0-43af-a672-6f1ea3dcd535",
          "timestamp": 1756217345492,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
          "name": "Create or Update Vote (Upsert)",
          "request": {
            "url": {
              "path": [
                "upsert"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response has vote data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('guild_id');",
                  "    pm.expect(responseJson).to.have.property('channel_id');",
                  "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                  "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                  "});"
                ],
                "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4434c12a-093a-4b3c-af70-d43d27e0efb8",
          "length": 21,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3229ed6b-1dd6-48b3-8d49-4fcde48c76ef",
          "scriptId": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
          "execution": "650d8b36-a9c0-4c47-996c-0c263a90d190"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "66efe08c32d556522ff27816d106af6e",
          "id": "fd36b01b-572e-4528-a68a-53111851bb3a",
          "timestamp": 1756217345616,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
          "name": "Delete Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Vote deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "518254a5-e7d6-47c8-b6ef-d6aed3bcd57f",
          "length": 21,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f96a8ff7-77c3-4d1b-b0b6-7ffd7ea3468f",
          "scriptId": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
          "execution": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Vote deleted successfully",
          "message": "expected { success: false, error: { …(4) } } to have property 'message'",
          "stack": "AssertionError: expected { success: false, error: { …(4) } } to have property 'message'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "6e8309554541e3e82596d99681073ef8",
          "id": "602178ee-fb96-42be-9962-2d6494c4b353",
          "timestamp": 1756217345618,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
          "name": "Delete Vote",
          "request": {
            "url": {
              "path": [
                "{{createdVoteId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Vote deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "518254a5-e7d6-47c8-b6ef-d6aed3bcd57f",
          "length": 21,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f96a8ff7-77c3-4d1b-b0b6-7ffd7ea3468f",
          "scriptId": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
          "execution": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has not found error",
          "message": "expected { success: true, …(1) } to have property 'error'",
          "stack": "AssertionError: expected { success: true, …(1) } to have property 'error'\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "a8bfb49d6d43dccd6de7921db29e96ce",
          "id": "12b807f9-fb31-4cbd-b008-edbd9438bc45",
          "timestamp": 1756217346239,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
          "name": "Test Get Non-existent Vote",
          "request": {
            "url": {
              "path": [
                "999999"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has not found error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b92c81f1-6642-4722-9705-7ed3af70b8ef",
              "name": "Create Vote",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"{{testGuildId}}\",\n    \"channel_id\": \"{{testChannelId}}\",\n    \"message_id\": \"{{testMessageId}}\",\n    \"rank_message_id\": \"{{testRankMsgId}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36cc3b53-4472-4b7c-b3b6-6781b89de2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "    ",
                      "    // حفظ معرف التصويت المنشأ للاختبارات اللاحقة",
                      "    pm.collectionVariables.set('createdVoteId', responseJson.id);",
                      "});"
                    ],
                    "_lastExecutionId": "36909d9c-67b3-4b7d-9b23-369e1491a814"
                  }
                }
              ]
            },
            {
              "id": "8e55ade8-84be-46e1-a14b-d5d3985bc346",
              "name": "Get All Votes",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e9b8196-1556-43fe-a01f-5c2dbc53a2c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "2fe3d33d-3696-4d46-8206-0b642190eb05"
                  }
                }
              ]
            },
            {
              "id": "b6087ddd-2341-4a56-a92c-315a23d4aa79",
              "name": "Get Vote by ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d4f786c-1894-40a4-96e8-718d7362bfe9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('id');",
                      "    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get('createdVoteId')));",
                      "});"
                    ],
                    "_lastExecutionId": "fc1c81ab-685a-40f2-99ed-8913bb79e518"
                  }
                }
              ]
            },
            {
              "id": "79558001-8b21-4fe6-bde8-9a236e2cccc2",
              "name": "Get Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1fa9441d-832e-465d-b70c-d211c56301c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "});"
                    ],
                    "_lastExecutionId": "90af439e-4cae-410c-a45d-7236bb317d5b"
                  }
                }
              ]
            },
            {
              "id": "62296095-013b-46c2-9abc-3996524c7849",
              "name": "Get Vote by Channel ID",
              "request": {
                "url": {
                  "path": [
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edc805d5-becb-4bb2-8758-be81c5742acc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c9a910b7-743e-4f11-9ad1-742c18526960"
                  }
                }
              ]
            },
            {
              "id": "ac5e2a02-c3cf-4252-88e6-28d1c86eb87c",
              "name": "Get Vote by Message ID",
              "request": {
                "url": {
                  "path": [
                    "message",
                    "{{testMessageId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcdd4f01-efaa-4376-92e3-78381a056368",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql(pm.collectionVariables.get('testMessageId'));",
                      "});"
                    ],
                    "_lastExecutionId": "622e932b-1afa-494e-b27f-54888f0e463e"
                  }
                }
              ]
            },
            {
              "id": "2464e3d9-d028-4675-9c58-c983e649fd5b",
              "name": "Get Vote by Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "rank-message",
                    "{{testRankMsgId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2a990e6-8b86-4e77-ad7c-b4ec2362c2b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct rank_message_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql(pm.collectionVariables.get('testRankMsgId'));",
                      "});"
                    ],
                    "_lastExecutionId": "c457caab-03ab-4db2-8503-2dfb73c67792"
                  }
                }
              ]
            },
            {
              "id": "a9e163cb-38ff-4c37-8862-1608e8dce4b1",
              "name": "Get Vote by Guild and Channel",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "channel",
                    "{{testChannelId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03ea08b8-06c9-44e1-90fc-0729b22ecea3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has correct guild_id and channel_id', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql(pm.collectionVariables.get('testGuildId'));",
                      "    pm.expect(responseJson.channel_id).to.eql(pm.collectionVariables.get('testChannelId'));",
                      "});"
                    ],
                    "_lastExecutionId": "517a1fa3-008c-4540-9ad2-14b1fcc4c817"
                  }
                }
              ]
            },
            {
              "id": "31063a61-a96e-4a30-9704-5f0fe5c010a5",
              "name": "Search Votes",
              "request": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "searchTerm",
                      "value": "{{testGuildId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46bb562b-aad8-427d-949f-cbde3bbbc220",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "cb30535f-a239-4b51-bf96-89e0f6135fa4"
                  }
                }
              ]
            },
            {
              "id": "a5985c1b-d307-4aa5-8075-8fa187879a5a",
              "name": "Get Vote Stats",
              "request": {
                "url": {
                  "path": [
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d2677a8-10ec-4c26-95f8-5a1064a5b49a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has stats data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ec4e3810-2db2-494d-872b-0b8685946da3"
                  }
                }
              ]
            },
            {
              "id": "c1a4908a-0527-42c3-8a8d-5d0101b29c55",
              "name": "Check Vote Exists",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac606657-2055-42b5-b28a-1dd47053475d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "450bfb21-4b10-44c7-b01e-cfc34fcfc05c"
                  }
                }
              ]
            },
            {
              "id": "f1b8b7ca-da51-4cdd-9e84-b0951ffdcde5",
              "name": "Check Vote Exists by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "{{testGuildId}}",
                    "exists"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0262e737-42ad-4fa5-b202-67a2ccb2e785",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates vote exists', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('exists');",
                      "    pm.expect(responseJson.exists).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "6e3268f2-74b9-4b69-b548-8b5e28aa76aa"
                  }
                }
              ]
            },
            {
              "id": "52c8dc96-74ba-4c3e-aacb-017d2603631d",
              "name": "Update Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message_id\": \"tm_updated_1756128570019\",\n    \"rank_message_id\": \"tr_updated_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22652f5a-8cef-4932-9ce9-2ad5485808da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_updated_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "65588529-94cc-4b1c-99f6-24cee49719d3"
                  }
                }
              ]
            },
            {
              "id": "a522385c-75a1-45e3-9a7a-f4ce7851255e",
              "name": "Update Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messageId\": \"tm_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aac522c-d609-4f58-b1d5-87ce7e467312",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message_id');",
                      "    pm.expect(responseJson.message_id).to.eql('tm_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "f57aca97-a976-483e-9ee1-0ef0f6bfc42b"
                  }
                }
              ]
            },
            {
              "id": "ce41b973-5e59-4cf0-96ce-8f5f53ea73a9",
              "name": "Update Rank Message ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "rank-message"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"rankMessageId\": \"tr_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08f84a3a-6a74-4912-ba4e-f88ce3f349a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Rank Message ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('rank_message_id');",
                      "    pm.expect(responseJson.rank_message_id).to.eql('tr_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "04988857-883e-4a26-bb93-d1c629792124"
                  }
                }
              ]
            },
            {
              "id": "a59b96dd-9989-46a2-96ed-0d626ca47cd8",
              "name": "Update Channel ID",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}",
                    "channel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"channelId\": \"tc_patch_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9862c0b9-18b5-491f-bdcf-e1b000839d70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Channel ID updated successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_patch_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "d9c29710-b023-4d7a-937a-c6edfb278071"
                  }
                }
              ]
            },
            {
              "id": "b6045c91-18e3-4b8d-b7b0-fa5b0c9910a6",
              "name": "Create or Update Vote (Upsert)",
              "request": {
                "url": {
                  "path": [
                    "upsert"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"tg_upsert_1756128570019\",\n    \"channel_id\": \"tc_upsert_1756128570019\",\n    \"message_id\": \"tm_upsert_1756128570019\",\n    \"rank_message_id\": \"tr_upsert_1756128570019\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "efd839a0-0948-4ee2-895f-9c078e2f3efa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 201', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response has vote data', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('guild_id');",
                      "    pm.expect(responseJson).to.have.property('channel_id');",
                      "    pm.expect(responseJson.guild_id).to.eql('tg_upsert_1756128570019');",
                      "    pm.expect(responseJson.channel_id).to.eql('tc_upsert_1756128570019');",
                      "});"
                    ],
                    "_lastExecutionId": "650d8b36-a9c0-4c47-996c-0c263a90d190"
                  }
                }
              ]
            },
            {
              "id": "bd1d18f9-4f0a-45ed-a191-f97f4729172d",
              "name": "Delete Vote by Guild ID",
              "request": {
                "url": {
                  "path": [
                    "guild",
                    "tg_upsert_1756128570019"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41110e18-906c-4f89-a1f6-ad7c14a16d4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "129d30d0-662e-489c-b9ad-987d5f0b47f4"
                  }
                }
              ]
            },
            {
              "id": "ac3ddec3-5d2d-443e-a72c-7749ea52e542",
              "name": "Delete Vote",
              "request": {
                "url": {
                  "path": [
                    "{{createdVoteId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "78f1191a-f4ab-41b6-910e-95b7baaa3f08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Vote deleted successfully', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "7ec2e499-f966-42d8-8e07-8ad675a8a6c7"
                  }
                }
              ]
            },
            {
              "id": "feb482c8-9c5a-4b15-aac0-0232b11b9a3b",
              "name": "Test Invalid Vote Creation (Missing Required Fields)",
              "request": {
                "url": {
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"guild_id\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95ccb826-26d8-48e6-9728-511a7ebf1bbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Response has validation error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed89ad8-c7ab-45ad-abef-19e0d53b320c"
                  }
                }
              ]
            },
            {
              "id": "b3145b1d-f7f9-4999-abf0-ce45d6fe4b34",
              "name": "Test Get Non-existent Vote",
              "request": {
                "url": {
                  "path": [
                    "999999"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bf425fa-8052-4e92-ad60-a562f305d909",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Response has not found error', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});"
                    ],
                    "_lastExecutionId": "2901b25d-f751-4a34-818b-4ba4b82f5268"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "http://localhost:3000/api/v1/votes",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "tg_1756128570019",
              "key": "testGuildId"
            },
            {
              "type": "any",
              "value": "tc_1756128570019",
              "key": "testChannelId"
            },
            {
              "type": "any",
              "value": "tm_1756128570019",
              "key": "testMessageId"
            },
            {
              "type": "any",
              "value": "tr_1756128570019",
              "key": "testRankMsgId"
            },
            {
              "type": "any",
              "value": "",
              "key": "createdVoteId"
            }
          ],
          "info": {
            "_postman_id": "a47c5160-eb86-4090-9157-3ceb4873c826",
            "name": "Votes API Tests",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "اختبارات شاملة لواجهة برمجة تطبيقات التصويتات",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7f28f515-af6c-4964-81f3-fc47a9c23de8",
          "length": 21,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "95a23a92-2aa7-4ab5-ac41-0b4a7766981a",
          "scriptId": "3bf425fa-8052-4e92-ad60-a562f305d909",
          "execution": "2901b25d-f751-4a34-818b-4ba4b82f5268"
        }
      }
    ],
    "error": null
  }
}