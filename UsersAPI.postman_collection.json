{
	"info": {
		"_postman_id": "users-api-collection-2024",
		"name": "Users API Collection",
		"description": "مجموعة شاملة لاختبار API إدارة المستخدمين",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "users-api"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				},
				"description": "جلب جميع المستخدمين المسجلين في النظام"
			},
			"response": []
		},
		{
			"name": "Get User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/123456789012345",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"123456789012345"
					]
				},
				"description": "جلب مستخدم محدد بواسطة المعرف (يجب أن يكون 15 حرف)"
			},
			"response": []
		},
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has created user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"أحمد محمد\",\n  \"email\": \"ahmed.mohamed@example.com\",\n  \"password_hash\": \"123456789\",\n  \"full_name\": \"أحمد محمد علي السيد\",\n  \"birthDate\": \"1995-05-15\",\n  \"phone\": \"+966501234567\",\n  \"avatar_url\": \"https://example.com/avatar.jpg\",\n  \"is_email_verified\": false,\n  \"is_phone_verified\": false\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				},
				"description": "إنشاء مستخدم جديد مع جميع البيانات المطلوبة"
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has updated user data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"أحمد محمد المحدث\",\n  \"email\": \"ahmed.updated@example.com\",\n  \"full_name\": \"أحمد محمد علي السيد المحدث\",\n  \"phone\": \"+966507654321\",\n  \"is_email_verified\": true,\n  \"is_phone_verified\": true\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users/123456789012345",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"123456789012345"
					]
				},
				"description": "تحديث بيانات مستخدم موجود"
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/123456789012345",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"123456789012345"
					]
				},
				"description": "حذف مستخدم من النظام"
			},
			"response": []
		},
		{
			"name": "Create User - Validation Error Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has validation error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"أ\",\n  \"email\": \"invalid-email\",\n  \"password_hash\": \"123\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users"
					]
				},
				"description": "اختبار أخطاء التحقق من صحة البيانات"
			},
			"response": []
		},
		{
			"name": "Get User By Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has validation error for ID length\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:3000/api/v1/users/123",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"v1",
						"users",
						"123"
					]
				},
				"description": "اختبار خطأ التحقق من طول المعرف (يجب أن يكون 15 حرف)"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1/users",
			"type": "string"
		},
		{
			"key": "testUserId",
			"value": "123456789012345",
			"type": "string"
		}
	]
}